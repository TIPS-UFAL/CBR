# Uri Problems PlainText CaseBase
# Columns: id_problema, titulo, descricao, entrada, saida, categoria, topico, nivel

problema1435@Matriz Quadrada I@Escreva um algoritmo que leia um inteiro N (0 ? N ? 100), correspondente a ordem de uma matriz M de inteiros, e construa a matriz de acordo com o exemplo abaixo.@A entrada consiste de vários inteiros, um valor por linha, correspondentes as ordens das matrizes a serem construídas. O final da entrada é marcado por um valor de ordem igual a zero (0).@Para cada inteiro da entrada imprima a matriz correspondente, de acordo com o exemplo. Os valores das matrizes devem ser formatados em um campo de tamanho 3 justificados à direita e separados por espaço. Após o último caractere de cada linha da matriz não deve haver espaços em branco. Após a impressão de cada matriz deve ser deixada uma linha em branco.@Iniciante@Matrizes@1
problema1541@Construindo Casas@Sr PI é um construtor muito famoso na cidade de Programolândia. Ele precisa de sua ajuda para encontrar os melhores terrenos da cidade, para realizar assim a construção de vários projetos de casas que possui. Considere que ele tenha por exemplo, um projeto para construir uma casa de 8 metros por 10 metros, e a legislação do município permite a construção de no máximo 100% do terreno. Como todos os terrenos nesta cidade são perfeitamente quadrados e o valor dos lados da casa são apenas uma referência para a área total a ser construída (80 metros quadrados), o sr PI precisaria de um terreno de 8.994 metros, o que simplificado daria como resultado 8 metros e o tamanho real da casa seria de 64 metros quadrados. Se a legislação permitisse a utilizar 50% do terreno, o mesmo teria que ter 160 metros para que 50% dele fosse 80 metros quadrados, o suficiente para uma casa de 8 x 8 metros (64 metros quadrados). No primeiro caso de teste, como o percentual para construir é de apenas 20%, o terreno teria que ter 20 metros de lado para que 1/5 deste terreno tivesse o tamanho de 80 metros quadrados. Ajude o sr PI a determinar o tamanho minimo do terreno.@A entrada é composta de vários casos de testes. Cada caso de teste é composto de três números inteiros A, B e C ( > 0 e ? 1000) separados por um espaço. Estes números representam as medidas da casa (A e B) e o percentual máximo liberado para construir nesse bairro (C). Um único valor igual a 0 indica o fim das entradas.@Você deverá informar um número inteiro, o qual representa a medida do lado do terreno. Este valor deverá ser truncado caso necessário.@Iniciante@Repetição@1
problema1759@Ho Ho Ho@"Papai Noel está brincando com seus duendes para entretê-los durante a véspera do Natal. A brincadeira consiste nos elfos escreverem números em pedaços de papel e colocarem no gorro do Papai Noel. Após todos terminarem de colocar os números Noel sorteia um papel e aquele número representa quantos ""Ho"" o Noel deve falar. Seu trabalho é ajudar o Papai Noel montando um problema que mostre todos os ""Ho"" que ele deve falar dado o número sorteado."@"A entrada é composta por um único inteiro N (0 < N ? 106) representando quantos ""Ho"" serão falados por Noel."@"A saída é composta por todos ""Ho"" que Papai Noel deve falar separados por um espaço. Após o último ""Ho"" deve ser apresentado um ""!"" encerrando o programa."@Iniciante@Ad-Hoc@1
problema1789@A Corrida de Lesmas@A corrida de lesmas é um esporte que cresceu muito nos últimos anos, fazendo com que várias pessoas dediquem suas vidas tentando capturar lesmas velozes, e treina-las para faturar milhões em corridas pelo mundo. Porém a tarefa de capturar lesmas velozes não é uma tarefa muito fácil, pois praticamente todas as lesmas são muito lentas. Cada lesma é classificada em um nível dependendo de sua velocidade: Nível 1: Se a velocidade é menor que 10 cm/h . Nível 2: Se a velocidade é maior ou igual a 10 cm/h e menor que 20 cm/h . Nível 3: Se a velocidade é maior ou igual a 20 cm/h . Sua tarefa é identificar qual nível de velocidade da lesma mais veloz de um grupo de lesmas.@A entrada consiste de múltiplos casos de teste, e cada um consiste em duas linhas: A primeira linha contém um inteiro L (1 ? L ? 500) representando o número de lesmas do grupo, e a segunda linha contém L inteiros Vi (1 ? Vi ? 50) representando as velocidades de cada lesma do grupo. A entrada termina com o fim do arquivo (EOF).@Para cada caso de teste, imprima uma única linha indicando o nível de velocidade da lesma mais veloz do grupo.@Iniciante@Iniciante@1
problema1827@Matriz Quadrada IV@Neste programa seu trabalho é ler um valor inteiro que será o tamanho da matriz quadrada (largura e altura) que será preenchida da seguinte forma: a parte externa é preenchida com 0, a parte interna é preenchida com 1, a diagonal principal é preenchida com 2, a diagonal secundária é preenchida com 3 e o ponto central contém o valor 4, conforme os exemplos abaixo. Obs: o quadrado com '1' sempre começa na posição tamanho/3, tanto na largura quanto quanto na altura. A linha e a coluna começam em zero (0).@A entrada contém vários casos de teste e termina com EOF (fim de arquivo. Cada caso de teste consiste de um valor inteiro ímpar N (5 ? N ? 101) que é o tamanho da matriz.@Para cada caso de teste, imprima a matriz correspondente conforme o exemplo abaixo. Após cada caso de teste, imprima uma linha em branco.@Iniciante@Matrizes@1
problema1828@Bazinga!@"No oitavo episodio da segunda temporada do seriado The Big Bang Theory, The Lizard-Spock Expansion, Sheldon e Raj discutem qual dos dois é o melhor: o filme Saturn 3 ou a série Deep Space 9. A sugestão de Raj para a resolução do impasse é uma disputa de Pedra-Papel-Tesoura. Contudo, Sheldon argumenta que, se as partes envolvidas se conhecem, entre 75% e 80% das disputas de Pedra-Papel-Tesoura terminam empatadas, e então sugere o Pedra-Papel-Tesoura-Lagarto-Spock. As regras do jogo proposto são: a tesoura corta o papel; o papel embrulha a pedra; a pedra esmaga o lagarto; o lagarto envenena Spock; Spock destrói a tesoura; a tesoura decapita o lagarto; o lagarto come o papel; o papel contesta Spock; Spock vaporiza a pedra; a pedra quebra a tesoura. Embora a situação não se resolva no episódio (ambos escolhem Spock, resultando em um empate), não é dif?cil deduzir o que aconteceria se a disputa continuasse. Caso Sheldon vencesse, ele se deleitaria com a vitória, exclamando ""Bazinga!""; caso Raj vencesse, ele concluiria que ""Raj trapaceou!""; caso o resultado fosse empate, ele exigiria nova partida: ""De novo!"". Conhecidas as personagens do jogo escolhido por ambos, faça um programa que imprima a provável reação de Sheldon."@A entrada consiste em uma série de casos de teste. A primeira linha contém um inteiro positivo T (T ? 100), que representa o número de casos de teste. Cada caso de teste é representado por uma linha da entrada, contendo as escolhas de Sheldon e Raj, respectivamente, separadas por um espaço em branco. As escolha possíveis são as personagens do jogo: pedra, papel, tesoura, lagarto e Spock.@"Para cada caso de teste deverá ser impressa a mensagem ""Caso #t: R"", onde t é o número do caso de teste (cuja contagem se inicia no número um) e R é uma das três reações possíveis de Sheldon: ""Bazinga!"", ""Raj trapaceou!"", ou ""De novo!"". Para cada caso de teste deverá ser impressa a mensagem ""Caso #t: R"", onde t é o número do caso de teste (cuja contagem se inicia no número um) e R é uma das três reações possíveis de Sheldon: ""Bazinga!"", ""Raj trapaceou!"", ou ""De novo!"". Para cada caso de teste deverá ser impressa a mensagem ""Caso #t: R"", onde t é o número do caso de teste (cuja contagem se inicia no número um) e R é uma das três reações possíveis de Sheldon: ""Bazinga!"", ""Raj trapaceou!"", ou ""De novo!"". Para cada caso de teste deverá ser impressa a mensagem ""Caso #t: R"", onde t é o número do caso de teste (cuja contagem se inicia no número um) e R é uma das três reações possíveis de Sheldon: ""Bazinga!"", ""Raj trapaceou!"", ou ""De novo!""."@Iniciante@Seleção@1
problema1914@De Quem é a Vez?@Amarelinha provavelmente é a brincadeira em que as crianças da vila mais se divertem, porém a mesma vem causando um bom tempo de discussão e choro nas crianças que a praticam. A causa do transtorno é para decidir quem será o próximo a pular, mas recentemente Quico (O gênio!) teve uma grande ideia para solucionar o problema. Basicamente a brincadeira só poderá ser jogada de dois em dois jogadores e para escolher o próximo jogador Quico indicou o uso do tradicional método par ou ímpar, onde os dois jogadores informam um número e se a soma desses números for par o jogador que escolheu PAR ganha ou vice verso. Entretanto a utilização desse método vem deixando o Quico louco, louco, louco... E por esse motivo ele pediu a sua ajuda! Solicitou a você um programa que dado o nome dos jogadores, suas respectivas escolhas PAR ou IMPAR e os números, informe quem foi o vencedor.@A primeira linha de entrada contém um número inteiro QT (1 ? QT ? 100), indicando a quantidade de casos de teste que vem a seguir. Cada caso de teste contém duas linhas. Na primeira linha será informado o nome do jogador 1 seguido de sua escolha, “PAR” ou “IMPAR” e logo após, o nome do jogador 2 seguido de sua escolha, “PAR” ou “IMPAR”. Na segunda linha de entrada, contém 2 números inteiros N (1 ? N ? 10?) e M (1 ? M ? 10?), representando respectivamente os números escolhidos pelo jogador 1 e pelo jogador 2. É garantido que a escolha (PAR ou IMPAR) do jogador 1 será diferente da escolha (PAR ou IMPAR) do jogador 2 e que o nome dos jogares são formados somente por letras e não ultrapassarão 100 caracteres.@Para cada caso de teste, imprima uma única linha contendo o nome do jogador vencedor.@Iniciante@Iniciante@1
problema2772@Plantação@André João é um grande cultivador de plantas de uma grande cidade do interior do grande Brasil. Ele possui atualmente um canteiro com N plantas de uma espécie muito peculiar que morre ao completar T dias consecutivos sem cuidados. Porém, André tem notado que muitas plantas tem morrido ultimamente, e suspeita que o seu funcionário é a razão disto. Sendo assim, ele pediu para que seu empregado anotasse o que foi feito em K dias, assim João poderia culpar o teu empregado pela morte das suas plantas. Como o canteiro de André é muito grande, ele pediu que você desenvolvesse um programa que dado a quantidade inicial de plantas, o tempo em que a espécie consegue sobreviver, e os intervalos que seu funcionário cuidou em cada dia, lhe informe as plantas que permaneceram vivas ao final deste período. João garante que todas as plantas foram cuidadas no dia 0 e, portanto, estão vivas! E o empregado garante que começou a trabalhar no dia 1 e nunca faltou um dia de serviço!@A entrada consiste de vários casos de teste. A primeira linha consiste dos inteiros N, K, T ( 1<= N, K, T <= 105 ). As próximas K linhas conterão dois inteiros l, r ( 1<= l <= r <= N ) significando que o empregado cuidou de todas as plantas no intervalo [l, r]  naquele dia.@Para cada caso de teste, seu programa deve imprimir um inteiro representando a quantidade de plantas que permaneceram vivas ao final do período, seguido dos índices delas em ordem crescente. Lembre-se, se uma planta morreu algum dia, ela nunca mais voltarás a vida ;(.@Iniciante@-@1
problema1266@Tornado!@É este tempo louco o resultado da interferência contínua da humanidade no meio ambiente? Ou é simplesmente o ciclo normal das mudanças climáticas através dos tempos? Ninguém parece saber ao certo, mas o fato é que os fenômenos naturais, como tornados e furacões atingem nosso país com mais força e freqüência do que nas décadas passadas. Um tornado acaba de atingir a fazenda Silverado, produtora de gado e de leite, e fez estragos. O telhado do celeiro foi rasgado, várias árvores foram arrancadas, o caminhão da fazenda foi derrubado... Mas o pior é que o tornado destruiu várias seções da cerca que rodeava a propriedade. A cerca foi muito bem construída, com postes de concreto a cada dois metros, e arame farpado encerrando o perímetro de toda a fazenda (o perímetro, em metros, é um número par, o que torna a cerca perfeitamente regular). Agora vários postes estão quebrados ou faltando, e há falhas na cerca. Para evitar que o gado fique de fora da propriedade, a cerca deve ser restaurada o mais rápido possível. Reconstruindo o muro à sua forma original, com postes de concreto, vai levar um longo tempo. Enquanto isso, os proprietários da fazenda decidiram fechar as lacunas com uma cerca temporária, feita com postes de madeira. Postes de madeira serão colocados exatamente nos mesmos pontos onde os postes estão faltando ou foram quebrados. No entanto, a fim de tornar a reconstrução temporária mais rápida e menos dispendiosa, os donos decidiram utilizar menos postes: um poste de madeira será utilizado para substituir um poste de concreto ausente / quebrado somente se o comprimento do arame farpado necessário para fechar a distância até o próximo poste (de madeira ou concreto) for superior a quatro metros. Dada a descrição de quantos postes estão quebrados ou faltando, você deve escrever um programa que determine a menor quantidade de postes de madeira que são necessários para fechar as lacunas da cerca, de acordo com a decisão dos proprietários.@A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um N indicando o número original de postes de concreto da cerca(5 ? N ? 5000). A segunda linha de um caso de teste irá conter N inteiros Xi indicando o estado de cada poste de concreto após a passagem do tornado (0 ? Xi ? 1 para 1 ? i ? N) . Se Xi = 1 o poste i esté em boas condições, se Xi = 0 o poste i está quebrado ou faltando. Note que o poste N é ao lado do poste 1. O final da entrada é indicado por N = 0 .@Para cada caso de teste da entrada seu programa deve produzir uma linha de saída, contendo um inteiro indicando o menor número de postes de madeira que são necessários para restaurar o muro, de acordo com a decisão dos proprietários.@Ad-Hoc@Ad-Hoc@3
problema1714@Letras@Os parques na Cidade da Lógica são reticulados de N × N quadrados (2 ? N ? 100), onde cada quadrado contém uma das 10 primeiras letras ASCII, abcdefghijABCDEFGHIJ, em caixa minúscula ou maiúscula. As pessoas na Cidade da Lógica têm orgulho de seguir apenas caminhos consistentes quando cruzam os parques. Por exemplo, se eles passam por um c minúsculo, eles não vão se permitir, mais adiante, passar por um C maiúsculo. Para definir isso mais precisamente, um caminho consistente é uma sequência de quadrados satisfazendo: quadrados consecutivos na sequência são adjacentes ortogonalmente; nenhuma letra ocorre na sequência tanto minúscula quanto maiúscula. Quer dizer, ou a letra não está na sequência, ou ela ocorre apenas em caixa minúscula, ou somente em caixa maiúscula. Você deve escrever um programa para ajudar as pessoas da Cidade da Lógica a computar o comprimento do menor caminho consistente entre o quadrado de coordenadas (1, 1), no canto superior esquerdo, e o quadrado de coordenadas (N, N ), no canto inferior direito. Por exemplo, para o parque acima, o menor caminho consistente tem comprimento 13.@A primeira linha da entrada contém um inteiro N (2 ? N ? 100), o tamanho do parque. As N linhas seguintes contêm, cada uma, uma sequência de N letras, definindo o parque.@Seu programa deve imprimir uma linha contendo um inteiro, o comprimento de um caminho consistente mínimo. Se não houver um caminho consistente, imprima -1.@Ad-Hoc@-@5
problema2051@Mapas de Karnaugh I@"Mapa de Karnaugh é uma tabela montada para facilitar o processo de minimização das expressões lógicas. Eles permitem simplificações com 2, 3, 4 ou mais variáveis, nesse problema utilizaremos no máximo expressões com 4 variáveis. Sua tarefa é simples, dado a tabela verdade você deverá  imprimir o respectivo Mapa de Karnaugh e dizer se a expressão é uma ""Tautologia"", uma ""Contradicao"" ou uma ""Contingencia""."@A primeira linha do arquivo de entrada contém um inteiro N (0 ? N ? 50) que indica o número de casos de testes, na primeira linha do caso de teste contém um inteiro V [2, 3, 4] que indica a quantidade de variáveis que serão utilizadas, as próximas 2V linhas conterão a tabela verdade.@"Para cada caso, você deverá apresentar a mensagem “Mapa de Karnaugh”, seguido pelo mesmo conforme o exemplo abaixo, após apresentar o mapa você deverá identificar se é ""Tautologia"",""Contradicao"" ou ""Contingencia"", uma linha em branco deverá separar os casos de teste, cuidado com os espaços, os valores no mapa deverão ser alinhados com o primeiro dígito da coluna."@Ad-Hoc@-@2
problema2384@Tradutor Alienígena@É de conhecimento público e notório que já fomos visitados por alienígenas diversas vezes. A grande dificuldade que temos, porém, é a comunicação com eles, por causa de grandes diferenças entre as línguas. Além disso, assim como nós, eles também têm várias línguas diferentes. Com o intuito de auxiliar no processo de tradução, foi criado um método de mapeamento dos símbolos do alfabeto de cada língua alienígena, atribuindo um número inteiro para cada símbolo. Sendo assim, para um alfabeto alienígena com N elementos, atribui-se números de 1 a N a cada um. O problema é que o encarregado de transcrever os textos alienígenas para números não foi muito cuidadoso e usou o mesmo espaçamento entre dígitos e números. Assim, por exemplo, digamos que para um alfabeto com 32 símbolos, uma sequência que deveria ser “31 20 4 19” virou “3120419”. Como se pode notar, há diferentes maneiras válidas de interpretar essa sequência além da original, como por exemplo “3 1 20 4 19” e “31 20 4 19”. Repare que a transcrição nunca usa zeros à esquerda de um número e, portanto, a sequência “3 12 04 19” é inválida, assim como “31 20 41 9” por conter um número (49) que não corresponde a um símbolo. Dados a quantidade de símbolos do alfabeto e uma sequência transcrita, determine quantas sequências válidas podem ser formadas.@A entrada é composta por duas linhas. A primeira contém um número inteiro N (1 < N < 10100) que indica a quantidade de símbolos do alfabeto. A segunda linha contém uma cadeia de dígitos de tamanho mínimo 1 e tamanho máximo 100.000 que corresponde a sequência transcrita.@Seu programa deve imprimir uma linha com o resto da divisão da quantidade de sequências válidas por 1.000.000.007.@Ad-Hoc@-@5
problema2449@Fechadura@Joãozinho estava um dia chegando em casa quando percebeu que havia perdido a chave da porta. Desesperado, ele resolveu pedir ajuda a seu amigo Roberto, que em poucos segundos conseguiu abrir a porta usando suas ferramentas. Admirado com a velocidade em que seu amigo conseguiu abrir a porta de sua casa sem a chave, ele decidiu perguntar como ele tinha conseguido aquilo. Roberto explicou que a fechadura da casa de Joãozinho é baseada em um sistema de pinos de tamanhos diferentes que, uma vez alinhados na mesma altura M, possibilitam a abertura da porta. Uma fechadura é um conjunto de N pinos dispostos horizontalmente que podem ser movimentados para cima ou para baixo com o auxílio de uma chave de metal que, ao ser inserida dentro da fechadura, pode aumentar ou diminuir em 1mm, simultaneamente, a altura de quaisquer dois pinos consecutivos. Joãozinho como um exemplar perfeccionista decidiu desbloquear sua fechadura na menor quantidade de movimentos, onde cada movimento consiste em escolher dois pinos consecutivos da fechadura e aumentar ou diminuir a altura dos dois pinos em 1mm. Após todos os pinos possuírem altura exatamente igual a M, a fechadura é desbloqueada.@A primeira linha da entrada contém dois inteiros N (1 ? N ? 1000) e M (1 ? M ? 100) representando, respectivamente, a quantidade de pinos da fechadura e a altura em que eles devem ficar para a fechadura ser desbloqueada. A segunda linha da entrada contém N (1 ? Ni ? 100) inteiros, representando as alturas dos pinos da fechadura.@Seu programa deve imprimir uma linha contendo um inteiro representando a quantidade mínima de movimentos para desbloquear a fechadura.@Ad-Hoc@-@5
problema2627@Bonde de Autômatos@O bonde de Autômatos e Computabilidade costuma sair da aula ás dezoito horas. Após aprenderem tantas teorias e resultados deste belíssimo aprimoramento da Matemática que é a Ciência da Computação. Ciro Minino, Hermanoteu, Jonny, Zezinho, Baiano e Pimenta Filosofal gostam de andar pelos belos campos elísios da UnB, para relaxarem e refletirem. À medida que o tempo passa, a conversa vai ficando cada vez mais profunda e abstrata. Hoje, Hermanoteu ficou insatisfeito com a solução cômoda que o professor deu para um problema, com uma simples máquina de Turing não-determinística. O problema é decidir se uma cadeia de comprimento N possui uma subcadeia ordenada de pontuação no mínimo K, onde: 1) uma subcadeia é obtida removendo zero ou mais símbolos de uma cadeia; e 2) a pontuação de uma cadeia é a soma das pontuações de seus símbolos. A pontuação do símbolo ‘a’ é 26, a pontuação do símbolo ‘b’ é 25, ... e a pontuação do símbolo ‘z’ é 1.@A entrada é composta por vários casos de teste e termina com fim de arquivo. A primeira linha de um caso de teste é composta pelo inteiros N (1 ? N ? 105) e K (1 ? K ? 26*105). A segunda linha contém a cadeia de comprimento N, com apenas letras minúsculas.@"Para cada caso de teste, imprima uma única linha com a mensagem ""Aceita"" se existe uma subcadeia que satisfaz a propriedade pedida, ou ""Rejeita"" em caso contrário."@Ad-Hoc@-@5
problema1120@Revisão de Contrato@Durante anos, todos os contratos da Associação de Contratos da Modernolândia (ACM) foram datilografados em uma velha máquina de datilografia. Recentemente Sr. Miranda, um dos contadores da ACM, percebeu que a máquina apresentava falha em um, e apenas um, dos dígitos numéricos. Mais especificamente, o dígito falho, quando datilografado, não é impresso na folha, como se a tecla correspondente não tivesse sido pressionada. Ele percebeu que isso poderia ter alterado os valores numéricos representados nos contratos e, preocupado com a contabilidade, quer saber, a partir dos valores originais negociados nos contratos, que ele mantinha em anotações manuscritas, quais os valores de fato representados nos contratos. Por exemplo, se a máquina apresenta falha no dígito 5, o valor 1500 seria datilografado no contrato como 100, pois o 5 não seria impresso. Note que o Sr. Miranda quer saber o valor numérico representado no contrato, ou seja, nessa mesma máquina, o número 5000 corresponde ao valor numérico 0, e não 000 (como ele de fato aparece impresso).@A entrada consiste de diversos casos de teste, cada um em uma linha. Cada linha contém dois inteiros D e N (1 ? D ? 9, 1 ? N < 10100 ), representando, respectivamente, o dígito que está apresentando problema na máquina e o número que foi negociado originalmente no contrato (que podem ser grande, pois Modernolândia tem sido acometida por hiperinflação nas últimas décadas). O ultimo caso de teste é seguido por uma linha que contém apenas dois zeros separados por espaços em branco.@Para cada caso de teste da entrada o seu programa deve imprimir uma linha contendo um único inteiro V, o valor numérico representado de fato no contrato.@Strings@String@3
problema1168@LED@João quer montar um painel de leds contendo diversos números. Ele não possui muitos leds, e não tem certeza se conseguirá montar o número desejado. Considerando a configuração dos leds dos números abaixo, faça um algoritmo que ajude João a descobrir a quantidade de leds necessário para montar o valor.@A entrada contém um inteiro N, (1 ? N ? 1000) correspondente ao número de casos de teste, seguido de N linhas, cada linha contendo um número (1 ? V ? 10100) correspondente ao valor que João quer montar com os leds.@"Para cada caso de teste, imprima uma linha contendo o número de leds que João precisa para montar o valor desejado, seguido da palavra ""leds""."@Strings@String@1
problema1272@Mensagem Oculta@Textos podem conter mensagens ocultas. Neste problema a mensagem oculta em um texto é composto pelas primeiras letras de cada palavra do texto, na ordem em que aparecem. É dado um texto composto apenas por letras minúsculas ou espaços. Pode haver mais de um espaço entre as palavras. O texto pode iniciar ou terminar em espaços, ou mesmo conter somente espaços.@A entrada contém vários casos de testes. A primeira linha de entrada contém um inteiro N que indica a quantidade de casos de teste que vem a seguir. Cada caso de teste consiste de uma única linha contendo de um a 50 caracteres, formado por letras minúsculas (‘a’-‘z’) ou espaços (‘ ’). Atenção para possíveis espaços no início ou no final do texto! Nota: No exemplo de entrada os espaços foram substituídos por pequenos pontos (‘·’) para facilitar o entendimento dos exemplos.@Para cada caso de teste imprima a mensagem oculta no texto de entrada.@Strings@Ad-Hoc@2
problema1406@Jukebox@Os juízes ICPC estão preparando um festa para a cerimônia de abertura. Para a festa, eles pretendem adicionar um playlist com algumas músicas para o software jukebox (um simples MP3 player). Entretanto, existem muitas músicas no computador, isso dificulta encontrar aquelas que eles querem adicionar. Como consequência, eles precisam usar algumas buscas muitas vezes. Nesta jukebox, quando você pesquisa por uma string s, o software retorna todas músicas cujos títulos ou nomes de artistas contém s como uma substring. A string s é uma substring da string t se t contém todos os caracteres de s como uma sequência contígua (por exemplo, 'bc' é uma substring de 'abcd', mas 'ac' não é). Para salvar o tempo precioso deles, enquanto procuram por uma música, eles sempre usam uma string de ouro da música, isto é, uma das mais curtas strings que retornam de uma pesquisa como resultado somente a música que eles querem. Neste exemplo, uma possível string de ouro para a música 'johnnatan' é 'ta'. Note que 'ta' não é uma substring do nome de outra música nem é uma substring do nome do artista de outra música. Note também que não existem strings de tamanho igual a 1 que podem identificar unicamente a música 'johnnatan'. Eles descobriram que se eles removem o campo artista de algumas músicas eles podem obter strings de ouro menores. Para a música 'john', não existe nenhuma string de ouro. Entretanto, se removermos o campo artista de todas as outras músicas, a string 'c' se torna a string de ouro para a música 'john'. Dada uma lista de músicas (cada música com nome e artista), sua tarefa é determinar a soma mínima do tamanho das strings de ouro para todas as músicas que podem ser obtidas se em algumas removermos o campo artista. Na figura acima, você pode ver um possível melhor resultado com as strings de ouro em negrito. A soma mínima dos tamanhos das strings de ouro neste caso é 10.@A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ? N ? 30), que indica o número de músicas. A seguir, existirão N pares de linhas (2*N linhas), um par para cada música. A primeira linha de um par contém o nome da música, a segunda conterá o nome da artista. Ambos, nome de artista e música, são strings contendo somente letras minúsculas e sobrescritos e terão no mínimo 1 e no máximo 30 caracteres. Existirão no máximo 6 artistas diferentes na lista. O fim da entrada é dado por N = 0.@Para cada caso de teste seu programa deve produzir uma linha simples com a soma mínima dos tamanhos das strings de ouro. Você pode assumir que sempre existirá uma solução.@Strings@PD@7
problema1448@Telefone Sem Fio@"Toda criança já brincou de ""telefone sem fio"". Joãozinho inventou uma variação da brincadeira. O grupo de crianças é dividido em dois times. Os times se organizam como na brincadeira original, em que cada um repete o que lhe foi falado para o seguinte, até que o último diz o que chegou até ele. No caso da brincadeira de Joãozinho será falada uma frase com n caracteres (contando letras, espaços, sinais de pontuação, etc). Todos sabem que a frase tem este comprimento. A frase é falada pelo juiz ao primeiro competidor de cada time que a repete para o segundo, e este para o terceiro e assim sucessivamente, até que o último competidor de cada time escreve a frase final (garantindo que n caracteres sejam escritos) e a entrega para o juiz. A equipe vencedora é aquela cuja frase final seja mais próxima da frase original. Para calcular a semelhança entre duas frases de mesmo comprimento você deve contar o número de vezes em que o caractere da frase do time coincide com o caractere da frase original. Ganha o time para o qual o número de coincidências seja máximo. Se os dois times empataram neste critério, a primeira vez que um dos times acertou e o outro errou decide. Exemplo: Se a frase original foi ""O rato roeu a roupa do rei."", o primeiro time escreveu ""O ator morreu, garoupa rei."" e o segundo time escreveu ""O pato moeu garoupa dorlei."" O segundo time ganhou pois teve 21 coincidências contra 9 coincidências do primeiro: Assim como os juízes da Maratona de Programação, estes juízes são muitos preguiçosos. Logo, pediram para você escrever um programa que resolve este problema."@A entrada começa com um inteiro t, onde 1 ? t ? 1000, indicando o número de instâncias que seu programa deve analisar. Cada instância é composta por três linhas, na primeira a frase correta, na segunda a frase do primeiro time e na terceira a frase do segundo time. Cada frase tem no máximo 100 caracteres, e as frases possuem sempre o mesmo tamanho.@Para cada instância, você deverá imprimir um identificador Instancia k, onde k é o número da instância atual. Na linha seguinte você deve imprimir qual dos times foi o vencedor ou se houve empate. Após cada instância, seu programa deve imprimir uma linha em branco.@Strings@Contadores@2
problema1629@DescompactaFACE@Em 2013 a Feira FACE compactou os dados de seus visitantes com um compactador livre, infelizmente esta ferramenta se tornou paga e você foi convidado a criar um algoritmo para descompactar os dados. Os dados estão compactados em formato decimal, e para funcionar o descompactador você terá que encontrar o dígito verificador de cada linha compactada. A organização da FACE conseguiu uma documentação de como funcionava o processo, mas algumas informações de como chegar ao dígito não estão muito claras, o documento apenas disponibiliza alguns exemplos, conforme segue: Linha compactada composta por 54782 ao descompactar iria resultar na cadeia binária 00000111100000001111111100, com isso o valor do dígito ficaria 8. Linha compactada composta por 045 ao descompactar iria resultar na cadeia binária 111100000, com isso o valor do dígito ficaria 9.@A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro N (1 ? N ? 25), representando o número de dados dos visitantes daquele arquivo, sendo que cada linha representa um visitante. As N linhas seguintes são compostas por K dígitos (1 ? K ? 103) sem espaço representando a linha compactada. A parada é determinada por N igual a 0.@Para cada linha compactada você deve exibir o dígito verificador descompactado.@Strings@-@2
problema1424@Problema Fácil de Rujia Liu?@"Embora Rujia Liu geralmente escreve problemas difíceis para algumas competições (como, por exemplo, competições regionais de Xi'an em 2006, de Pequim em 2007 e de Wuhan em 2009, ou competições no UVA OJ como a ""Rujia Liu's Presents"" 1 e 2), ele escreve problemas fáceis algumas vezes (como, por exemplo, o problema ""the Coco-Cola Store"" no UVA-OJ), para encorajar mais pessoas a resolver mais problemas :D Dado um vetor de inteiros, sua tarefa é encontrar a k-ésima ocorrência (da esquerda para a direita) de um inteiro v no vetor. Para tornar o problema mais difícil (e mais interessante!), você deve responder a m consultas deste tipo."@Há vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros n e m (1 ? n, m ? 100.000), o número de elementos no vetor e o número de consultas a serem respondidas, respectivamente. A próxima linha contém n inteiros positivos não maiores que 1.000.000, que descrevem o vetor. As próximas m linhas contém dois inteiros k e v cada (1 ? k ? n, 1 ? v ? 1.000.000), descrevendo as consultas. O arquivo de entrada termina com fim-de-arquivo (EOF). O tamanho do arquivo de entrada não excede 5 Mb.@Para cada consulta, imprima o índice do vetor (1-indexado) da ocorrência solicitada. Se tal ocorrência não existe, imprima 0 ao invés.@Estruturas e bibliotecas@ Estrutura; Mapas@4
problema1439@Bora Bora@Bora Bora é um jogo de cartas simples para crianças, inventado na Ilha do Pacífico Sul de mesmo nome. Duas ou mais pessoas podem jogar, usando um baralho de cartas normais. As cartas têm os valores normais: Ás, 2, 3, 4, 5, 6, 7, 8, 9, 10, Valete, Dama e Rei. Cada carta tem também um dos quatro naipes: Paus, Ouros, Copas e Espadas. Os jogadores sentam-se em um círculo ao redor da mesa e jogam por turnos. O próximo jogador a jogar pode ser aquele à esquerda (sentido horário) ou o jogador à direita (sentido anti-horário) do jogador atual, dependendo das cartas jogadas, como você verá. No começo, o sentido do jogo é horário. O baralho é embaralhado e é dada a cada jogador uma mão de cartas. O restante do baralho é colocado na mesa, virado para baixo; a essa pilha é dado o nome de pilha de saque. Então a primeira (a mais acima) carta é removida da pilha e colocada na mesa, virada para cima, começando outra pilha, chamada de pilha de descarte. O objetivo do jogo é que um jogador descarte todas suas cartas. Em cada turno, um jogador descarta no máximo uma carta. Uma carta pode ser descartada apenas se ela tem o mesmo valor ou o mesmo naipe da carta que se encontra no topo da pilha de descarte. Um jogador descarta uma carta colocando-a, virada para cima, na pilha de descarte (essa carta se torna a carta do topo). Se um jogador não tiver uma carta passível de ser descartada em seu turno, ele deve sacar uma carta da pilha de saque e adicionar à sua mão; se ele puder descartar essa carta, ele o faz, caso contrário ele não faz mais nada e seu turno acaba. Um jogador sempre descarta a carta mais alta que ele consegue. O valor de uma carta é determinado primeiro pelo valor da carta e então pelo naipe. A ordem dos valores é o valor em si (Ás é o menor e Rei é o maior), e a ordem dos naipes é, do menor para o maior, Paus, Ouros, Copas e Espadas. Portanto, a carta de maior valor é o Rei de Espadas e a de menor valor é o Ás de Paus. Como exemplo, a Dama de Ouros tem um valor maior que um Valete (qualquer naipe) mas tem um valor menor que a Dama de Copas. Algumas das cartas descartadas afetam o jogo, como se segue: Quando uma Dama é descartada, a direção de jogo é invertida: se a direção é horária, ela se torna anti-horária, e vice-versa; Quando um Sete é descartado, o próximo jogador deve sacar duas cartas da pilha de saque (o número de cartas em sua mão aumenta por dois), e perde a vez (não descarta nenhuma carta); Quando um Ás é descartado, o próximo jogador deve sacar uma carta da pilha de saque (o número de cartas em sua mão aumenta por um), e perde sua rodada (não descarta nenhuma carta); Quando um Valete é descartado, o próximo jogador perde a vez (não descarta nenhuma carta). Perceba que a penalidade da primeira carta da pilha de descarte (a carta sacada da pilha de saque no começo) é aplicada ao primeiro jogador a jogar. Por exemplo, se o primeiro jogador é p e a primeira carta na pilha de descarte é um Ás, o jogador p saca uma carta da pilha de saque e não descarta nenhuma carta em seu primeiro turno. Note também que se a primeira carta é uma Dama, o sentido do jogo é invertido para o anti-horário, mas o primeiro jogador a jogar permanece o mesmo. O vencedor é o jogador que descarta todas suas cartas primeiro (o jogo acaba depois de o vencedor descartar sua última carta). Dada a descrição do baralho embaralhado e o número de jogadores, escreva um programa que determine quem vencerá o jogo.@A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém três inteiros P, M e N, separados por espaço, indicando respectivamente o número de jogadores (2 ? P ? 10), o número de cartas distribuídas para cada jogador no começo da partida (1 ? M ? 11) e o número de cartas no baralho embaralhado (3 ? N ? 300). Cada uma das próximas N linhas contém a descrição de uma carta. Uma carta é descrita por um inteiro X e um caractere S, separados por um espaço, representando respectivamente o valor da carta e seu naipe. O valor das cartas é mapeado com inteiros de 1 a 13 (Ás é 1, Valete é 11, Dama é 12 e Rei é 13). Os naipes das cartas são designados pela primeira letra do naipe: 'C' (Paus - Clubs), 'D' (Ouros - Diamonds), 'H' (Copas - Hearts) ou 'S' (Espadas - Spades). Os jogadores são identificados com valores de 1 a P e sentam-se em um círculo, no sentido horário, 1, 2 ... P, 1. As primeiras P x M cartas do baralho são distribuídas aos jogadores: as primeiras M cartas ao primeiro jogador (jogador 1), as próximas M cartas ao segundo jogador (jogador 2), e assim por diante. Depois de distribuir as cartas aos jogadores, a próxima carta do baralho - a (P x M + 1)-ésima carta - é usada para começar a pilha de descarte, e as cartas restantes formam a pilha de saque. A (P x M + 2)-ésima carta a aparecer na entrada é a carta do topo da pilha de saque, e a última carta a aparecer na entrada (a N-ésima carta) é a carta de baixo da pilha de saque (a última carta que pode ser sacada). O jogador 1 é sempre o primeiro a jogar (mesmo se a carta usada para começar a pilha de descarte é uma Dama). Todos os casos de teste têm um vencedor, e em todos casos de teste o número de cartas no baralho é suficiente para jogar até o fim da partida. O final da entrada é indicado por uma linha contendo apenas três zeros, separados por espaços.@Para cada caso de teste na entrada, seu programa deve imprimir uma única linha, contendo o número do jogador que ganha a partida.@Estruturas e bibliotecas@Implementação; Simulação@6
problema1594@Guloso@Dado um vetor de inteiros de tamanho N e um inteiro K, ache o maior elemento para cada sub-vetor contínuo de tamanho K. Imprima a soma de todos estes valores. Exemplo 1: Se tivermos o vetor [3, 2, 1, 4, 10] e K for 3, então temos que considerar os sub-vetores [3, 2, 1], [2, 1, 4] e [1, 4, 10]. O maior elemento de cada sub-vetor vale 3, 4 e 10, somando o total de 17. Exemplo 2: Se tivermos o vetor [1, 2, 3, 4, 5, 6] e K for 2, então temos que considerar os sub-vetores [1, 2], [2, 3], [3, 4], [4, 5] e [5, 6]. O maior elemento de cada sub-vetor vale 2, 3, 4, 5 e 6 somando o total de 20. Exemplo 3: Se tivermos o vetor [5, 4, 3] e K for 1, então temos que considerar os sub-vetores [5], [4] e [3]. O maior elemento de cada sub-vetor vale 5, 4 e 3 somando o total de 12.@A entrada para esse problema é bem singular, leia com atenção! Na primeira linha você terá um inteiro T (T = 200) indicando o número de casos de teste. Para cada caso você receberá três números inteiros, N (1 ? N ? 104* ou 1 ? N ? 106**), K (1 ? K ? N) e S (0 ? S ? 109). Para gerar o vetor de inteiros, use o seguinte código em C/C++ em que recomendamos que você copie (control+C) do enunciado: array[0] = S; for (i = 1; i < N; ++i) array[i] = (1LL*array[i-1]*1103515245 + 12345) % (2147483648LL); É garantido que existe uma solução que não se baseia nas propriedades do gerador da entrada acima. *ocorrerá em 90% dos casos; **ocorrerá nos casos restantes.@Para cada caso imprima a soma dos maiores elementos de cada sub-vetor.@Estruturas e bibliotecas@-@3
problema1897@Jogo Esperto@Enquanto Bino descansava, inventou um jogo esperto. Dado um número N e um número M, Bino quer saber qual a quantidade mínima de operações para converter N em M. Existe seis operações permitidas. Operação 1: N = N*2 Operação 2: N = N*3 Operação 3: N = N/2 Operação 4: N = N/3 Operação 5: N = N+7 Operação 6: N = N-7@A entrada contém dois inteiros N ( 0 ? N ? 10000) e M ( 0 ? M ? 10000).@A saída é o número mínimo de operações para converter N em M.@Estruturas e bibliotecas@Fila@4
problema2482@Etiquetas de Noel@"Como de costume, neste ano Noel recebeu muitos pedidos de presentes. Só que em função de alguns imprevistos, não terá como entregar todos os presentes pessoalmente neste ano. Daí então decidiu utilizar o velho e bom correio tradicional, para alguns pedidos que podem ser entregues por carta. Para esta tarefa, pediu ajuda ao elfo Evergreen Xadada, para que ele imprimisse etiquetas a todos os envelopes que serão destinados a algumas destas crianças, cujo pedido pode ser entregue por carta. Cada uma destas etiquetas deverá conter apenas o nome da criança e a saudação ""Feliz Natal"" no respectivo idioma desta criança. Para auxiliar nesta tarefa, Noel disponibilizou uma tabela com vários idiomas e o nome e o país de cada uma das crianças selecionadas, de acordo com o exemplo abaixo. Você deve ajudar Evergreen fazendo um programa que imprima estas etiquetas."@"A entrada é composta por um único caso de teste. A primeira linha de entrada contém um inteiro N (1 < N < 100) que indica a quantidade de traduções da palavra ""Feliz Natal"" existentes na entrada. As próximas N * 2 linhas contém respectivamente o nome de uma língua seguido da tradução de ""Feliz Natal"" para esta língua. Segue um inteiro M (1 < M < 100) que indica a quantidade de crianças que receberão as cartas. As próximas M * 2 linhas conterão, respectivamente, o nome da criança e a língua nativa desta criança. Obs.: É garantido que nenhuma tradução apareça repetida ou duplicada e os países de todas as crianças estejam presentes na relação dos países."@Seu programa deverá imprimir todas as etiquetas de acordo com a entrada, conforme o exemplo abaixo, sempre com uma linha em branco após a impressão de cada uma das etiquetas, inclusive após a última etiqueta.@Estruturas e bibliotecas@Mapas@2
problema2729@Lista de Compras@Valentina é uma mulher muito dedicada e costuma trabalhar até tarde todos os dias. Para economizar tempo, ela faz a lista de compras do mercado em um aplicativo e costuma anotar cada item na mesma hora que percebe a falta dele em casa. O problema é que o aplicativo não exclui itens duplicados e como Valentina é distraída, anota o mesmo item mais de uma vez e a lista acaba ficando extensa. Sua tarefa como programadora e amiga de Valentina é melhorar o aplicativo de notas desenvolvendo um código que exclua os itens duplicados da lista de compras e que os ordene alfabeticamente.@A primeira linha de entrada contém um inteiro N (N < 100) que indica a quantidade de casos de teste que vem a seguir, ou melhor, a quantidade de listas de compras que Valentina quer organizar. Cada lista de compra consiste de uma única linha que contém de 1 a 1000 itens ou palavras compostas apenas de letras minúsculas (de 1 a 20 letras), sem acentos e separadas por um espaço.@A saída contém N linhas, cada uma representando uma das listas de compras de Valentina, sem itens repetidos e em ordem alfabética.@Estruturas e bibliotecas@Mapas@1
problema1093@Vampiros@Felipinho está empolgado com seu novo jogo de RPG sobre guerras entre clãs de vampiros. Nesse jogo ele representa um personagem de um vampiro e constantemente entra em conflito contra vampiros de outros clãs. Tais batalhas são realizadas com base nas características de cada personagem envolvido e com a ajuda de um dado comum de seis faces. Por simplicidade, vamos considerar apenas as lutas entre dois vampiros, vampiro 1 e vampiro 2. Cada um possui uma energia vital (chamaremos de EV1 e EV2 respectivamente) e, além disso, são determinadas uma força de ataque AT e uma capacidade de dano D. O combate é realizado em turnos da maneira descrita a seguir. A cada turno um dado é rolado, se o valor obtido for menor do que ou igual a AT, o vampiro 1 venceu o turno, caso contrário o vampiro 2 é quem venceu. O vencedor suga energia vital do adversário igual ao valor D, ou seja, D pontos de EV são diminuídos do perdedor e acrescentados ao vencedor. O combate segue até que um dos vampiros fique com EV igual a ou menor do que zero. Por exemplo, suponhamos que EV1=7, EV2=5, AT=2 and D=4. Rola-se o dado e o valor obtido foi 3. Nesse caso, o vampiro 2 venceu o turno e, portanto, 4 pontos de EV são diminuídos do vampiro 1 (EV1) e acrescentados ao vampiro 2 (EV2) Sendo assim, os novos valores seriam EV1=3 e EV2=9. Observe que se no próximo turno o vampiro 2 ganhar novamente, o combate irá terminar. Os valores de AT e D são constantes durante todo o combate, apenas EV1 e EV2 variam. Apesar de gostar muito do jogo, Felipinho acha que os combates estão muito demorados e gostaria de conhecer de antemão a probabilidade de vencer, para saber se vale a pen a lutar. Assim, ele pediu que você escrevesse um programa que, dados os valores iniciais de EV1, EV2, além de AT e D, calculasse a probabilidade de o vampiro 1 vencer o combate.@A entrada consiste de vários casos de teste. Cada caso de teste consiste de uma única linha, contendo 4 inteiros EV1, EV2, AT e D separados por espaços (1 ? EV1, EV2 ? 10, 1 ? AT ? 5 and 1 ? D ? 10). O final da entrada é indicado por uma linha contendo quatro zeros, separados por espaços.@Para cada caso de teste da entrada seu programa deve imprimir uma única linha. A linha deve conter apenas um número real, escrito com precisão de uma casa decimal, representando, em termos de percentagem, a probabilidade de o vampiro 1 vencer o combate.@Matemática@Matemática; Estatística@5
problema1630@Estacas@Marcos trabalha em uma empreiteira, sua tarefa é cercar com estacas os terrenos onde serão construidos prédios. Existem duas restrições para a distribuição destas estacas, elas devem ser colocadas de tal forma que a distância entre duas estacas seja sempre igual, e a segunda restrição é que Marcos deve usar o menor número possível de estacas. Marcos é seu amigo e pediu para que você desenvolva um programa para ajudá-lo.@Haverão diversos casos de teste, cada caso de teste é descrito em uma linha por dois números X e Y (1 ? X, Y ? 100000000), os quais representam as dimensões do terreno. O final da entrada é indicado por final de arquivo.@Para cada caso de teste imprima uma linha com o número mínimo de estacas necessário para cercar o tereno.@Matemática@-@4
problema1656@Doces do Dia das Bruxas @Todos os anos há o mesmo problema no Halloween: Cada vizinho só está disposto a dar certo número total de doces neste dia, não importa quantas crianças peçam, por isso pode acontecer que uma criança fique sem nada, se for tarde demais. Para evitar conflitos, as crianças decidiram que vão colocar todos os doces juntos e depois dividi-los igualmente entre si. A partir da experiência do Halloween do ano passado, elas sabem quantos doces recebem de cada vizinho. Visto que elas se preocupam mais com a justiça do que o número de doces que recebem, elas querem selecionar um subconjunto de vizinhos para visitar, para que na partilha cada criança receba o mesmo número de doces. Elas não vão ficar satisfeitas se sobrar doces que não possam ser divididos. Seu trabalho é ajudar as crianças e apresentar uma solução.@A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros c e n (1 ? c ? n ? 100000), sendo o número de crianças e o número de vizinhos, respectivamente. A próxima linha contém n inteiros separados por espaço a1,...,an (1 ? ai ? 100000), onde ai representa o número de doces que as crianças recebem se visitarem vizinho i. O último caso de teste é seguido por dois zeros.@"Para cada caso de teste, imprima uma linha com os índices dos vizinhos que as crianças devem selecionar (aqui, o índice i corresponde ao vizinho i que dá um total de doces ai). Se não houver solução, onde cada criança recebe pelo menos um doce, imprima ""no sweets"". Observe que, se existir várias soluções onde cada criança recebe pelo menos um doce, você pode imprimir qualquer uma delas."@Matemática@Princípio das Casas de Pombos@8
problema1694@Loteria@Pinkie Pie está se sentindo com sorte. Ela está indo para a lotérica de sua cidade para fazer uma aposta e tentar a sorte. O bilhete da aposta consiste em uma matriz de N linhas por M colunas. As casas são numeradas de 0 a N*M-1 de forma que o número da casa da r-ésima linha e c-ésima coluna (indexadas a partir do 0) é r * M + c. Uma aposta consiste em escolher K números distintos dentre os disponíveis. Pinkie pressente que os números vencedores estarão próximos uns aos outros, então ela decide escolher números que estão ou todos na mesma linha ou todos na mesma coluna. Pinkie também acredita que números primos trazem má sorte, e não fará nenhuma aposta que contém ao menos um número primo. Twilight passou em frente à lotéria e encontrou Pinkie incapaz de chegar a uma decisão. Querendo testar suas habilidades matemáticas, ela decidiu, enquanto Pinkie fazia sua escolha, calcular quantas apostas diferentes Pinkie Pie poderia fazer. Duas apostas são consideradas distintas se existe um elemento presente em uma aposta e ausente na outra.@Existem diversos casos testes. Cada caso de teste consiste de uma única linha contendo três inteiros N, M e K (1 ? N, M ? 50; 1 ? K ? 10). O último caso de teste é seguido de uma linha contendo três zeros.@Para cada caso de teste, imprima uma única linha contendo o número de apostas diferentes que Pinkie Pie pode fazer, de forma que os números estejam todos ou na mesma linha ou na mesma coluna, e que nenhum número primo seja escolhido. Um número primo é um número natural maior que 1 que não possui divisores positivos além de 1 e si mesmo.@Matemática@Números primos@5
problema2660@Cigarras Periódicas@As “cigarras periódicas” americanas têm o ciclo de vida mais longo de todos os insetos conhecidos. A cada 17 anos, estas cigarras periódicas amadurecem, se acasalam, depositam ovos e morrem. Suas crias se refugiam debaixo da terra, a 20 centímetros de profundidade, onde elas se alimentarão da seiva de raízes por 17 anos, até que chegue seu dia de buscar um lugar ao sol. Acredita-se que esse número não aconteceu por acaso, outras espécies de cigarras da região tem ciclos de 13 anos, assim essas duas espécies emergem ao mesmo tempo apenas a cada 221 anos. Isso é desejável pois dessa forma a chance de que as duas espécies se misturem diminui consideravelmente e características indesejáveis de uma população não são introduzidas na outra. Inspirado por esse fenômeno, uma nova variação de algoritmo evolutivo foi criada. Na última etapa desse algoritmo as melhores possíveis soluções são divididas em populações de modo que cada população i tem um ciclo de vida Ci . Além disso uma população extra também é adicionada, de modo que a quantidade de iterações até que o ciclo de vida de todas as populações coincida seja a maior possível. Essas populações são então avaliadas até que o ciclo de vida de todas coincida e a melhor solução ao final do processo é escolhida. Como não é interessante esperar demais até que o algoritmo gere uma resposta, um limite superior L no número de iterações também deve ser respeitado. Dados os ciclos de vida das populações criadas e o limite na quantidade de iterações L, sua tarefa é computar qual o período ótimo para a população extra que será adicionada.@A primeira linha da entrada contém dois inteiros N e L, respectivamente, a quantidade de populações geradas pelas etapas anteriores do algoritmo e o limite da quantidade de iterações, 2 ? N ? 104 , 1 ? L ? 106 . A linha seguinte contém os N valores Ci representando a quantidade de iterações no ciclo de vida de cada população, onde 1 ? Ci . Você pode assumir que os ciclos de vida das populações atuais coincidem em menos de L iterações.@Seu programa deve produzir uma única linha com um inteiro representando o período da população extra que maximiza a quantidade T de iterações até que os ciclos de vida de todas as populações coincidam, respeitando a restrição de que T ? L. Caso exista mais de um valor possível imprima o menor deles.@Matemática@-@4
problema2661@Despojados@Todo inteiro positivo pode ser escrito como um produto de potências de primos. Por exemplo, 252 = 22 × 32 × 7. Um inteiro é despojado se pode ser escrito como um produto de dois ou mais primos distintos, sem repetição. Por exemplo, 6 = 2 × 3 e 14 = 2 × 7 são despojados, mas 28 = 22 × 7, 1, 17 não são despojados.@A entrada consiste de uma única linha que contém um inteiro N (1 ? N ? 1012).@Seu programa deve produzir uma única linha com um inteiro representando o número de divisores despojados de N.@Matemática@-@5
problema1282@Organizando Pacotes@Uma empresa de mineração extrai térbio, um metal raro usado para a construção de ímãs leves, a partir de areia de rio. Eles mineram um grande rio em N pontos de mineração, cada um deles identificado por sua distância a partir da origem do rio. Em cada ponto de mineração, uma pequena pilha ou amontoado de minério mineral altamente valorizado é extraido do rio. Para recolher o minério mineral, a empresa reagrupa os N amontoados produzidos em um menor número de K pilhas ou montes maiores, cada um localizado num dos pontos de extração inicial. Os montes recém-formados são então recolhidos por caminhões. Para reagrupar os N montes eles usam uma barca, o que na prática pode levar qualquer quantidade de minério mineral por ser bem larga. A barcaça começa na origem do rio e somente pode viajar rio abaixo, de modo que o amontoado de mineral produzido em um ponto X de mineração pode ser levado para um ponto Y de mineração somente se Y > X. Cada monte é movimentado completamente para outro ponto de mineração, ou não se move. O custo de mover um monte com peso W a partir de um ponto X de mineração para um ponto Y de mineração é W (Y - X). O custo total do agrupamento é a soma dos custos de cada movimento de um monte. Nota-se que um monte que não é movido não tem influência sobre o custo total. Dados os valores de N e K, os N pontos de mineração, e o peso da pilha ou amontoado produzido de cada ponto de mineração, escreva um programa que calcule o custo total mínimo para reagrupar estes N montinhos iniciais em K pilhas ou montes maiores.@Cada caso de teste é descrito usando várias linhas. A primeira linha contém dois inteiros N e K os quais denotam espectivamente, o número de montes ou pilhas iniciais e o número desejado de montes após o reagrupamento (1 ? K < N ? 1000). Cada uma das seguintes N linhas descrevem um dos montes iniciais com dois números inteiros X e W indicando que o ponto X de mineração produziu um amontoado com peso de W (1 ? X, W ? 106 ). Dentro de cada caso de teste, os montes ou pilhas são dados estritamente em ordem ascendente, considerando os seus pontos de mineração.@Para cada caso teste de saída terá uma linha com um inteiro representando o mínimo custo total, para reagrupar os N amontoados iniciais em K montes maiores.@Paradigmas@PD; DAG (grafos acíclicos dirigidos)@9
problema1579@Transporte de Painéis Solares@Há alguns anos, algumas empresas vem atuando forte na produção de energia baseada em painéis solares. Obviamente o local mais adequado para isso são os desertos. No deserto de Mojave, nos Estados Unidos, já foram instalados várias usinas para geração de energia solar, como por exemplo a usina Solar Nellis, que fica na Base Aérea de Nellis, em Clark County, Nevada. Esta usina gera mais de 30 milhões de quilowatts-hora de eletricidade por ano. O projeto de 100 milhões dólares americanos começou a produção de energia no final de 2007, a planta é alimentada por 72.000 painéis solares de rastreamento do sol cobrindo 140 acres. Além da Nellis, outras usinas como a Sierra Sun Tower, Copper Mountain, Solar One e outras foram construídas neste mesmo deserto. A Espanha já utiliza uma usina solar no deserto do Saara que foi construída pela Solar Millenium. O projeto deu tão certo que agora outras empresas estão iniciando novos projetos nesta região para gerar energia para a Europa. Bem, você possui uma empresa de transportes com muitos caminhões e foi contratado pela empresa Delta Solar fazer o transporte de painéis solares no Saara. Os painéis possuem tamanhos e pesos diferentes relacionados com a estrutura de cada conjunto de painéis, que muda de acordo com o local aonde deverão ser instalados. O transporte deles deverá ser feito na sequência correta, que é exatamente a sequência na qual eles aparecem na entrada. O cálculo do frete é feito de acordo com o peso dos painéis transportados pelos seus caminhões e a distância que os caminhões deverão percorrer. Foi acertado que você informe todo dia a quantidade de caminhões disponíveis (isso muda porque alguns vão para manutenção, outros novos chegam, etc) e um encarregado da Delta Solar vai tentar separar as cargas para minimizar o valor do transporte, uma vez que por um acerto inicial, pagarão o frete utilizando como referência a carga mais pesada transportada no dia, multiplicada pelo número de caminhões utilizados no trasporte.@A primeira linha de entrada contém um inteiro N que determina a quantidade de casos de teste (ou dias de trabalho no deserto). Cada caso de teste é composto por duas linhas. A primeira linha contém três valores inteiros nPaineis (4 ? nPaineis ? 100), caminhoes (1 ? caminhoes ? 10) e frete (1 ? frete ? 50) separados por um espaço, que indicam respectivamente a quantidade de painéis que devem ser transportados, número de caminhões utilizados para o transporte e o frete cobrado por cada caminhào para cada kg transportado. A linha seguinte contém o peso (1 ? peso ? 1000) de cada um dos painéis, separados por um espaço em branco.@Para cada caso de teste de entrada, seu programa deverá imprimir uma linha, informando o peso do caminhão mais carregado seguido por um espaço e o valor total do frete cobrado pelo dia de trabalho.@Paradigmas@Busca Binária; STL@5
problema2050@Bar do Ramsey@Bill “Snake” Ramsey foi um dos mais famosos donos de saloon em San Antonio. Seu saloon era conhecido até a costa oeste, e suas mesas de pôquer sempre lotadas eram sinônimo de jogos eletrizantes, muito dinheiro e, muitas vezes, muitas disputas sangrentas. Ramsey tinha uma teoria (e seu revólver .38 intimidava os que dele discordavam ao contestá-lo) de que em uma mesa de pôquer com 6 participantes havia sempre ou 3 que eram amigos entre si, ou 3 que eram inimigos entre si (naquela época em San Antonio se você não era amigo de alguém automaticamente se tornava seu inimigo). Hoje sabemos que Ramsey tinha de fato razão. Sua tarefa neste problema é checar a afirmação de Ramsey para vários exemplos.@São dadas várias mesas de pôquer (cada mesa tem sempre 6 jogadores). Para cada mesa é dado o número ?1 ? m ? 15 de pares de amigos seguido, na linha seguinte, dos nomes dos participantes daquele jogo (cada nome é uma string de no mínimo 1 e no máximo 15 caracteres e você pode supor que os nomes dos jogadores são dois a dois distintos). O valor ?1 indica o fim dos dados. Em seguida, vêm m linhas, cada uma com os nomes de dois amigos naquela mesa. Considere que um jogador não é amigo de si mesmo.@Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, seqüencial e crescente a partir de 1. Nas próximas linhas, você deve imprimir os nomes de três jogadores daquela mesa seguida de sao amigos ou sao inimigos conforme o caso. Devem haver tantas linhas quantos forem os casos determinados. Estas linhas devem estar listadas em ordem lexicográfica. O mesmo vale para os três nomes em uma mesma linha. Uma linha em branco deve separar a saída de cada instância.@Paradigmas@-@3
problema2360@Centrais de Controle@Sildávia é um reino muito grande, como todos vocês já devem conhecer. Para controlar todo o sistema de transporte, energia, água, e etc. Sildávia possui centrais de controle para cada uma de suas regiões. Tudo ocorria muito bem, até a chegada da crise economica. Com a crise, o governador de Sildávia decidiu cortar custos. Para isto, instalou fibra ótica entre as regiões, conectando diversos pares de centrais, de maneira em que cada central conectou-se com as demais direta ou indiretamente. Como o governador não possuia muito dinheiro, ele decidiu utilizar para as N regiões, apenas N-1 cabos. É válido lembrar que nenhuma central ficou desconectada. Com a ligação de fibra ótica, cada central é capaz de controlar uma ou mais centrais que ela está diretamente ligada. Em outras palavras, agora centrais eram capazes de controlar não apenas só sua região, como suas vizinhas ligadas diretamente. Assim, é possível que algumas centrais de controle em Sildávia possam ser desligadas (pois seriam controladas por centrais em outras regiões), então o governador contratou você para saber de quantas maneiras possíveis podemos desligar centrais de tal forma que todo o reino de Sildávia ainda esteja sobre controle. Observações Manter todo o reino de Sildávia sobre controle significa que cada região de Sildávia será controlada por sua central, ou alguma outra central que esteja ligada a sua.@A entrada consiste de diversos casos teste. Cada caso possui um inteiro N que é a quantidade de regiões em Sildávia (1 ? N ? 1000). As próximas N-1 linhas contém as ligações entre as centrais, dois inteiros A e B (1 ? A, B ? N).@Para cada caso teste imprima um inteiro que é a quantidade de formas de controlar Sildávia módulo 109+7. No primeiro caso teste, temos apenas uma região em Sildávia. Logo, para termos o controle total, a única forma é deixar a central de controle desta região ligada. No segundo caso, se deixarmos a região 2 ligada, podemos desligar as outras demais, deixar apenas a região 1 ligada, ou deixar apenas a região 3 ligada, ou deixar ambas ligadas, o que nos dá 4 formas. A outra forma é deixar a região 1 e 3 ligada (assim controlamos a região 2) e desligar a 2. Total: 5 formas de controlar Sildávia.@Paradigmas@-@5
problema2599@Contando Radares@O governo da Taxilândia está enfrentando um enorme problema, os taxilandenses amam carros e velocidade, por isso estão correndo muito nas avenidas da cidade. Para amenizar esse problema o governo vai instalar radares nas avenidas, de modo que cada trecho seja coberto por um radar. A empresa que o governo contratou possui M tipos de radares disponíveis sendo que cada um cobre Mi kilometros contíguos da avenida. Você foi contratado pelo governo para fazer um programa que dado o comprimento da avenida e a área de cobertura dos radares, informe de quantas maneiras distintas é possível colocar os radares na avenida de modo que ela fique totalmente preenchida. A imagem abaixo mostra uma avenida de tamanho 4 quilômetros e radares com cobertura de 3 e 2 quilômetros, cada cor representa um radar, então é possível notar que a quantidade distintas de cobrir a avenida são 4.@A primeira linha da entrada é composta por um inteiro C que indica a quantidade de casos de teste. A primeira linha de cada caso de teste é composta por dois inteiros N e M que indicam o tamanho da avenida e quantos tamanhos de radares disponíveis existem no mercado. A segunda linha é composta por M inteiros que representa o tamanho dos radares disponíveis (1???N???104) (1???M???103) (1???Mi???N)@Seu programa deve exibir a quantidade de maneiras distintas de cobrir toda a avenida. Como o resultado pode ser muito grande imprima a resposta módulo 1000000007.@Paradigmas@PD@3
problema2818@Jogo Divertido@Bino e Cino estão brincando de remover algarismos de um número para o tornar múltiplo de 6. Para realizar essa brincadeira, eles sorteiam um número, então tentam remover a menor quantidade de algarismos desse número para que ele se torne um múltiplo de 6 sem zeros a esquerda. Com o passar o tempo, Bino e Cino ficaram muito bons nesse jogo, e sempre conseguem transformar o número em um múltiplo de 6 utilizando a menor quantidade de remoções possíveis. Por exemplo: 132: Não é necessário remover algarismos, pois 132 é múltiplo de 6. 106: É necessário remover o 1 e o 0 do número para que o resto fique múltiplo de 6. Não é possível remover somente o 1, pois o número ficaria com zeros a esquerda.@A entrada consiste de múltiplas linhas. A primeira linha contém um inteiro X ( 1 ? X ? 100) indicando a quantidade de casos de teste. Cada uma das próximas X linhas contém um inteiro Y ( 0 ? Y ? 10100000 ) indicando um número sorteado por Bino e Cino.@"Para cada número sorteado por Bino e Cino, imprima a menor quantidade necessária de remoções de algarismos para que o número fique múltiplo de 6. Caso não seja possível tornar o número múltiplo de 6, imprima a mensagem ""Cilada""."@Paradigmas@PD@3
problema1883@Fuga de Ayutthaya@"Ayutthaya foi um dos primeiros reinos da Tailândia. Ele existiu entre os anos 1351 e 1767. A organização de Investigadores de Mistérios Extraordinários (IME) tem um grande interesse em revelar os segredos dessa antiga civilização. Um dos historiadores mais renomeados dessa instituição é Márcio ""o imprescindível"" Himura. Atualmente, ele está investigando as regras de conduta e os castigos que eram impostos na época do rei Ramathibodi I, fundador de Ayutthaya. Descobertas recentes mostram uma forma de punição dada aos habitantes de Ayutthaya que não se convertiam ao budismo theravada, religião que foi adotada pelo rei Ramathibodi I. Esse castigo consistia em deixar a pessoa presa em uma sala que tinha uma única saída, e onde era aceso fogo em diferentes lugares. Se a pessoa conseguia chegar à saída antes de ser atingida pelo fogo, sua vida era perdoada. Márcio tem acesso a diferentes registros que mostram a estrutura de algumas salas onde eram feitos esses castigos. Porém, não existem documentos onde se registre se a pessoa punida foi perdoada ou não. Márcio gostaria de saber se para cada uma dessas pessoas existe alguma chance de ela ter sido perdoada. Para isso, Márcio representou cada sala como uma grade de N linhas e M colunas onde cada posição contém um símbolo com o seguinte significado. Onde ""início"" se refere à posição da pessoa dentro da sala quando o fogo foi aceso. Além disso, Márcio impôs as seguintes restrições para modelar cada situação: O fogo se propaga nas quatro direções cardinais (N, S, E, O) à velocidade de uma célula por minuto. A pessoa presa também se move em essas quatro direções com essa mesma velocidade. Nem o fogo e nem a pessoa presa podem ultrapassar uma parede. Se a pessoa e o fogo chegarem a ocupar a mesma posição no mesmo instante de tempo, então considera-se que essa pessoa morre instantaneamente. Você é um membro do IME e Márcio quer saber se você merece tal distinção. Por isso, encarregou a você a tarefa de determinar se um preso teve a chance de ser perdoado."@A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância consiste de diversas linhas. A primeira linha contém dois inteiros, N (1 ? N ? 103) e M (1 ? M ? 103) . A seguintes N linhas contêm exatamente M símbolos representando, como descrito no enunciado, uma sala onde uma pessoa foi presa.@Para cada instância, imprima uma linha contendo um único caractere. Imprima 'Y' se a pessoa teve alguma chance de ter sido perdoada; caso contrário, imprima 'N'.@Grafos@-@5
problema2419@Costa@A Nlogônia é um país tropical, com muitas belezas naturais internacionalmente famosas; dentre elas, encontram-se as belas praias que compõem o arquipélago do país, que todo verão recebem milhões de turistas estrangeiros. O Ministério do Turismo da Nlogônia está preparando o país para a chegada dos turistas, mas para fazer seu planejamento, precisa saber a extensão da costa nlogônica. Para isso, ele gerou um mapa que divide o território nacional em vários quadrados, que podem ser ocupados por água ou por terra; considera-se que um quadrado é parte da costa nlogônica se ele é um quadrado ocupado por terra que tem um lado em comum com um quadrado ocupado por água. Na figura abaixo, (a) mostra um trecho do mapa gerado e (b) mostra os quadrados do trecho dado que são costa. Como a Nlogônia é um país muito grande, o ministro do turismo pediu que você escrevesse um programa que, dado o mapa da Nlogônia, determina a extensão da costa nlogônica.@A primeira linha da entrada contém dois inteiros M e N (1 ? M, N ? 1000) indicando, respectivamente, o número de linhas e o número de colunas do mapa. Cada uma das M linhas seguintes contém N caracteres: um caractere ‘.’ indica que aquele quadrado do território é ocupada por água; um caractere ‘#’ indica que aquele quadrado do território é ocupada por terra. Considere que todo o espaço fora da área do mapa é ocupado por água.@Seu programa deve imprimir uma única linha contendo um único inteiro, indicando quantos quadrados do território fazem parte da costa da Nlogônia.@Grafos@Componentes Conexos@5
problema2476@Entregas do Noel@Por incrível que pareça, Papai Noel ainda não começou a fabricar os presentes que serão entregues no natal. Para ele não se atrasar foi bolado um plano para agilizar as entregas e a fabricação. O plano de Noel consiste em escolher duas crianças (A e B), para serem as primeiras a receberem os presentes, mas o que ele reparou é que no caminho entre a casa da criança A até a casa da criança B, ele acabará passando por outras crianças que também enviaram suas cartinhas com o que gostariam de ganhar. Portanto Noel decidiu que irá entregar todos os presentes das crianças que estão entre as casas A e B em apenas uma viagem. A parte da entrega é muito simples para o Noel, mas ele precisa otimizar a compra de matérias-primas para a confecção de todos os presentes, e é aqui que você entra para o auxiliar. Será dado a você o mapa com todas as casas onde ocorrerá entregas, que consiste em N casas, com N - 1 ligações, tendo exatamente um caminho entre cada uma delas, como Noel sempre viaja de trenó, todas as ligações podem ser usadas nos dois sentidos. Após isto Noel irá fazer diversas perguntas do tipo A B, e você deverá responder quantos presentes distintos ele terá que entregar no caminho entre a casa A e a casa B.@A primeira linha contêm dois inteiros N e M (2 ? N ? 10?, 1 ? M ? 10?), indicando respectivamente o total de casas e o total de perguntas que Noel irá fazer. Na próxima linha terá a descrição de cada presente que será entregue nas casas. Cada presente será uma palavra com letras minúsculas contendo no máximo 20 caracteres. O presente na posição i, indica o que a criança na casa i deseja ganhar. Segue então N - 1 linhas, contendo dois inteiros A e B (1 ? A, B ? N, A != B), indicando que existe uma ligação entre as casas A e B. M linhas seguem com dois inteiros A e B, representando a pergunta de Noel.@Para cada pergunta de Noel, você deverá imprimir a quantidade distinta de presentes que serão entregues.@Grafos@LCA@7
problema2545@Manyfile@No ano de 2569, Vasya recebe de sua mãe um grandioso presente de aniversário, o código fonte do seu vídeo-game favorito, Aranha Paciente. Vasya corre direto ao seu computador, com 4096 núcleos de processamento, insere o disquete, digita ls no diretório do código e nota que ele é composto de N arquivos fonte e um Manyfile. Um Manyfile é como uma receita de bolo para compilar o código. Ao se executar o comando many, o Manyfile é lido e os arquivos começam a ser compilados, de forma que o máximo de núcleos de processamento são utilizados simultaneamente. Se o mundo fosse perfeito, este processo seria muito rápido, uma vez que cada arquivo fonte do jogo demora exatamente um minuto para ser compilado, mas infelizmente a compilação de alguns arquivos depende da conclusão de outros, impossibilitando que todos os arquivos sejam processados simultaneamente. Considerando a compilação da Aranha Paciente como terminada quando todos os seus N arquivos tiverem sido compilados e sabendo quais arquivos dependem de qual, escreva um programa que calcule para Vasya quantos minutos demorará para que a Aranha Paciente seja compilada.@A entrada contém vários casos de teste. A primeira linha de cada caso contém o inteiro N (1 ? N ? 1000), o número de arquivos fonte da Aranha Paciente. Os arquivos são numerados de 1 a N. As N linhas seguintes descrevem os arquivos. A i-ésima linha contém um inteiro Mi (0 ? Mi < N) seguido de Mi inteiros com valor entre 1 e N e diferentes de i, representando o índice dos arquivos dos quais o arquivo i depende. A entrada termina com fim-de-arquivo (EOF).@Para cada caso de teste, imprima uma única linha contendo o tempo total em minutos que demorará para que a Aranha Paciente seja compilada. Caso seja impossível terminal a compilação, imprima -1.@Grafos@Ordenação Topológica@4
problema2550@Novo Campus@A Universidade Federal da República dos Pinheiros (UFRP) está construindo um novo campus na capital do país. Neste momento, todos os N prédios do campus estão construídos e prontos para operar! Entretanto, ainda não foi construída nenhuma via ligando estes prédios. Hoje, é impossível sair de algum prédio e ir para outro prédio no campus! Para resolver este problema, o reitor da UFRP quer construir vias entre pares de prédios do campus de tal forma que todos os prédios estejam conectados, isto é, de tal forma que, utilizando uma ou mais das vias construídas, seja possível sair de qualquer prédio e ir para qualquer outro no campus. Entretanto, devido ao relevo complicado da capital, pode não ser possível construir uma via entre qualquer par de prédios. Dada a lista de vias que podem ser construídas e o custo de construção de cada via, determine se é possível tornar todos os prédios conectados e, em caso positivo, o custo total mínimo para construir as vias necessárias.@A entrada contém vários casos de teste. A primeira linha de cada caso contém dois inteiros N e M (2 ? N ? 1000, 0 ? M ? N(N-1)/2 ), o número de prédios no campus e de vias que podem ser construídas, respectivamente. Os prédios são numerados de 1 a N. As próximas M linhas descrevem as vias. Cada linha contém três inteiros A, B e C (1 ? A, B ? N, A?B, 1 ? C ? 104), indicando a possibilidade de construção de uma via que liga os prédios A e B entre si e cuja construção custa C reais. É garantido que, para cada par de prédios, no máximo uma via pode ser construída entre eles. A entrada termina com fim-de-arquivo (EOF).@Para cada caso de teste, caso não seja possível conectar todos os prédios, imprima uma linha contendo “impossivel” (sem aspas). Caso contrário, imprima uma linha contendo o custo mínimo necessário para conectar todos os prédios, em reais.@Grafos@Árvore Geradora Mínima@3
problema2558@Robô Aspirador@Ricciardi, o robô aspirador, recebeu ordens. Deve limpar o máximo possível dos N grãos de sujeira no chão e chegar à estação de recarga. Parece uma tarefa trivial, mas Ricciardi está com a bateria viciada e pode realizar apenas M movimentos antes de esgotá-la. Localizado em uma sala retangular dividida em W × H células quadradas, o robô pode, em um movimento, se movimentar para a célula adjacente diretamente acima, abaixo, à esquerda ou à direita de sua posição atual, desde que não haja obstáculos nela. Determinado a economizar energia e realizar seu trabalho com maestria, Ricciardi pediu a você para escrever um programa que calcule o número máximo de grãos de sujeira que Ricciardi consegue limpar.@A entrada contém vários casos de teste. A primeira linha de cada caso contém dois inteiros N (1 ? N ? 8) e M (1 ? M ? 109). A segunda linha também contém dois inteiros W e H (5 ? W, H ? 100). As H linhas seguintes contém W caracteres cada e descrevem a sala. Obstáculos são representados por '#', posições livres por '.' , a posição inicial de Ricciardi por 'R', grãos de sujeira por '*' e a estação de recarga por 'S'. Ricciardi coleta os grãos automaticamente ao passar por cima deles e consegue andar sobre a estação de recarga como em qualquer posição livre. A entrada termina com fim-de-arquivo (EOF).@Para cada caso de teste, imprima uma linha com um único inteiro, o número máximo de grãos que Ricciardi consegue coletar chegando à estação de recarga. Se o robô não consegue chegar à estação, imprima -1.@Grafos@Busca em Largura@5
problema1124@Elevador@A FCC (Fábrica de Cilindros de Carbono) fabrica vários tipos de cilindros de carbono. A FCC está instalada no décimo andar de um prédio, e utiliza os vários elevadores do prédio para transportar os cilindros. Por questão de segurança, os cilindros devem ser transportados na posição vertical; como são pesados, no máximo dois cilindros podem ser transportados em uma única viagem de elevador. Os elevadores têm formato de paralelepípedo e sempre têm altura maior que a altura dos cilindros. Para minimizar o número de viagens de elevador para transportar os cilindros, a FCC quer, sempre que possível, colocar dois cilindros no elevador. A figura abaixo ilustra, esquematicamente (vista superior), um caso em que isto é possível (a), e um caso em que isto não é possível (b). Como existe uma quantidade muito grande de elevadores e de tipos de cilindros, a FCC quer que você escreva um programa que, dadas as dimensões do elevador e dos dois cilindros, determine se é possível colocar os dois cilindros no elevador.@A entrada contém vários casos de teste. A primeira e única linha de cada caso de teste contém quatro números inteiros L, C, R1 e R2, separados por espaços em branco, indicando respectivamente a largura do elevador (1 ? L ? 100), o comprimento do elevador (1 ? C ? 100), e os raios dos cilindros (1 ? R1, R2 ? 100). O último caso de teste é seguido por uma linha que contém quatro zeros separados por espaços em branco.@Para cada caso de teste, o seu programa deve imprimir uma única linha com um único caractere: ‘S’ se for possível colocar os dois cilindros no elevador e ‘N’ caso contrário.@Geometria computacional@Geometria Computacional@3
problema1204@Myachowski, o Futebol Russo@"Muitas origens diferentes são atribuídas ao futebol. A atividade mais antiga que se assemelha ao futebol era praticada na China entre os séc. III e II a.C. e chamava-se ts’uh Kúh (cuju), e consistia em jogar uma pequena bola com os pés para uma rede. No Japão existe o kemari, praticado até hoje em eventos culturais. Em Roma jogava-se o harpastum, e na Grécia o epislcyros. Com a descoberta do novo mundo descobriu-se também um jogo maia muito semelhante ao futebol, o pok ta pok que teria mais de 3 000 anos de história. Na idade média jogava-se em Florença o calcio florentino, que muitos reputam ser o berço do futebol moderno. Até hoje índios do Amazonas jogam um jogo muito semelhante em que uma bola é empurrada usando apenas a cabeça em direção às metas inimigas. Seja como for, é quase  impossível dizer qual o jogo que deu origem ao futebol hoje jogado, cujas regras foram formalmente estabelecidas pelos ingleses no final do século XIX. Pouco se tem notícia de um jogo russo, também ancestral do futebol e com regras bastante claras (como diria o Arnaldo). É o Myachowski, também conhecido como Otskok. O nome vem provavelmente de Myach que significa ""bola"" em russo. No jogo um jogador entra em um campo que é uma elipse fechada e deve acertar um buraco localizado na parede do campo. Porém, o ponto só é computado se a bola entra no buraco após ser chutada contra as paredes do campo, sendo desviada para dentro do buraco. Dadas a posição inicial da bola, a direção na qual ela está se movimentando e a descrição do campo, sua tarefa é determinar os próximos dois pontos de contato da bola com a parede do campo. Considere que o centro do campo é a posição (0; 0). Reflexão da Bola: Suponha para esse problema que a bola é refletida perfeitamente quando atinge a parede do campo. Isso é, o ângulo que o vetor de entrada faz com a reta tangente à parede do campo no ponto de contato é o mesmo que ângulo de saída. A Figura abaixo exemplifica esse comportamento."@A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância consiste em uma linha contendo 6 inteiros, X, Y, Dx, Dy, (-1000 <= Dx,Dy <= 1000), A e B, (1 <= A,B <= 500). A posição inicial da bola é dada pelo ponto (X; Y ) dentro da elipse e a direção pelo vetor (Dx;Dy). O campo tem o formato de uma elipse descrita pela equação x²  y²  -  +  -  = 1. A² B²@Para cada instância imprima duas linhas. A primeira linha deve conter o primeiro ponto de contato da bola com a parede do campo e a segunda linha deve conter o segundo ponto de contato. Um ponto de contato deve ser impresso como dois números racionais separados por um espaço. Imprima os números com exatamente 3 casas decimais.@Geometria computacional@Geometria; matemática@5
problema1345@Região Segura@Você foi contratado pela Minas Nunca Mais, uma organização não-governamental que tem como objetivo o banimento do uso de minas terrestres. Além de trabalhar no aspecto político, tal como convencer governantes a entrar na Campanha Internacional de Banimento das Minas Terrestres, MNM também trabalha desarmando minas deixadas por guerras passadas. Hoje em dia, minas são detectadas por satélites ou aviões de vigilância. Mas para desarmar uma mina você precisa chegar próximo a ela. Na maioria dos casos, a única maneira de se aproximar de um campo minado é de helicóptero. Para limpar o campo, você precisa encontrar a região mais segura dentro do campo para que o helicóptero possa pousar nela. Esta região é um retângulo com lados paralelos aos eixos das coordenadas, sem nenhuma mina dentro e sendo o menor lado o maior possível. Mais precisamente, seja A e B o comprimento dos lados de todos os possíveis retângulos com não contém nenhuma mina e A <= B; a região mais segura é um retângulo com o maior valor de A e o maior valor de B. Isto é, entre todos os retângulos que não contém nenhuma mina e nos quais o menor lado é o A (maior possível), a região mais segura é o retângulo que contém o maior B. Dado o limite do retângulo de um campo minado e as posições de todas as minas dentro deste, você deverá escrever um programa para encontrar o tamanho da região mais segura.@Seu programa deverá processar dados de diversos casos de teste. A primeira linha de um campo minado contém quatro inteiros X1, Y1, X2 e Y2 os quais são os limites do campo. (X1, Y1) são as coordenadas do canto inferior esquerdo do campo, (X2, Y2) são as coordenadas do canto superior direito do campo (-20000 ? X1 < X2 ? 20000 e -20000 ? Y1 < Y2 ? 20000). A segunda linha contém um único inteiro N indicando o número de minas detectadas no campo (1 ? N ? 300). As seguintes N linhas contém dois inteiros X e Y cada, descrevendo a posição da uma mina (X1 ? X ? X2 e Y1 ? Y ? Y2). Duas minas não compartilham a mesma posição. O final da entrada é indicado quando X1 = Y1 = X2 = Y2 = 0.@Para cada campo minado de sua entrada seu programa deverá escrever uma linha com dois inteiros A e B, onde A ? B, descrevendo o tamanho da posição mais segura.@Geometria computacional@-@7
problema2245@Kit de Encolhimento de Polígonos@Um Kit de Encolhimento de Polígonos é um material muito utilizado nas aulas de magia geométrica na Nlogônia. O kit consiste de dois pontos, A e B no plano cartesiano. Considere um polígono convexo dado pelos vértices 1, 2...N, nessa ordem. Para encolher esse polígono usando o kit, algumas regras devem ser respeitadas. Cada vértice x do polígono deve ser movido uma vez só: para o ponto médio do segmento Ax ou para o ponto médio do segmento Bx. A operação de encolhimento deve produzir um novo polígono convexo que preserve a ordem relativa dos vértices do polígono original. Em outras palavras, considerando todas as possíveis maneiras de aplicar o kit, apenas aquelas cuja sequência final dos vêrtices 1, 2...N representa um polígono convexo são válidas. Veja que o polígono convexo original pode estar em sentido horário e uma operação de encolhimento válida produzir um polígono convexo em sentido anti-horário, na mesma ordem dos vértices. Apenas a ordem relativa dos pontos é importante, não o sentido. E sabido que magia geométrica não é o forte da maioria dos alunos. A professora pediu que eles usassem o kit de encolhimento para encolher um polígono convexo fornecido por ela de forma a obter a menor área possível e um amigo seu implorou para que você resolva a questão por ele. Responda a menor área possível do polígono para ele. A Figura acima ilustra um uso válido do kit, onde o polígono sombreado é o de menor área possível que preserva a sequência dos vértices. Os pontos A e B correspondem aos pontos do kit. Note que, apesar do nome encolhimento, às vezes é possível utilizar o kit para aumentar a área dos polígonos! Como geometria é difícil! Observe que um único ponto ou uma reta não são considerados polígonos. Sendo assim, se um uso do kit produzir como resultado algo diferente de um polígono convexo, esse não é um uso válido.@A primeira linha da entrada contém um inteiro N (3 ? N ? 105), o némero de vértices do polígono. Seguem N linhas, cada uma com dois inteiros x, y (-106 ? x, y ? 106), os vértices do poligono. A última linha da entrada contém quatro inteiros, Ax, Ay, Bx e By (-106 ? Ax, Ay, Bx, By ? 106), as coordenadas x e y de A e as coordenadas x e y de B, respectivamente. Os pontos da entrada serão dados na ordem correta em que aparecem no polígono, no sentido horário ou anti-horário. Não haverão pontos repetidos e o polígono será convexo.@Seu programa deve produzir uma linha, contendo um número real, com 3 casas decimais de precisão, representando a menor área possível para um polígono obtido com o uso do kit.@Geometria computacional@Geometria Computacional@7
problema2362@Invasão Alienígena@Os alienígenas invadiram a terra e vão aniquilar a raça humana, a não ser que você consiga detê-los. Recentemente, o S.B.C. (Sistema Brasileiro de Combate) foi equipado com uma arma laser muito poderosa, que será usada para destruir os inimigos alienígenas. Essa arma é poderosa a ponto de poder destruir tudo dentro de qualquer região circular. Felizmente, é possível controlar milimétricamente os disparos dessa arma, de forma que é possível escolher o centro e o raio da região circular que será destruída. Isso mesmo, é possível realizar um disparo com raio de destruição grande o suficiente para destruir todos os alienígenas. Infelizmente, não é tão simples assim. Ao fazer isso, é possível que toda a humanidade também seja destruída. Decidiu-se, então, que nenhuma vida humana deveria ser tirada por essa arma laser. É claro que ainda queremos destruir os inimigos alienígenas, oras. Por isso, você foi contratado pela S.B.C.. Seu trabalho é determinar qual é o maior número de alienígenas que podem ser destruídos por um único disparo da arma laser, de forma que nenhum ser humano seja destruído. Observações Indivíduos na borda da região de destruição da arma laser também são destruídos. É improvável que meio ser humano consiga sobreviver. Esperamos que seja assim com alienígenas também.@A entrada contém vários casos de teste. Cada caso de teste começa com uma linha contendo dois inteiros, N e M (1 ? N, M ? 100), descrevendo o número de alienígenas e de humanos, respectivamente. Cada uma das N linhas seguintes contém dois inteiros, Xi e Yi (-106 ? Xi, Yi ? 106), representado as coordenadas de um dos alienígenas. Da mesma forma, cada uma das M linhas seguintes contém dois inteiros, Xi e Yi (-106 ? Xi, Yi ? 106), representado as coodenadas de um dos seres humanos. Mesmo se tratando de alienígenas, é claro que dois indivíduos não podem ocupar o mesmo lugar. O final da entada é indicado por N=M=0.@Para cada caso de teste, imprima um inteiro indicando o maior número de alienígenas que podem ser destruídos por um único disparo, sem que nenhum ser humano seja destruído.@Geometria computacional@-@6
problema2525@Cacheiro Viajante@Clóvis Eduardo é um cacheiro viajante, ou seja, ele viaja o mundo para praticar geocaching. Geocaching é um jogo mundial de GPS no qual os jogadores encontram caixas escondidas (conhecidas como geocaches) por outros jogadores fazendo uso das coordenadas terrestres. Devido a sua grande reputação e experiência (mais de 32768 geocaches encontrados em todos os continentes), Clóvis Eduardo foi convidado pelo ministério de Lazer e Esporte da Nlogônia a ajudar a esconder o geocache mais importante da história do país, uma grande caixa de ouro maciço em forma de cavalo, em comemoração aos 50 anos da instauração da república na Nlogônia. Entretanto, não basta apenas encontrar o local perfeito. Novos geocaches devem seguir as regras nacionais de colocação atualizadas este ano: Nenhum geocache novo pode ser colocado no mesmo lugar de outro já existente; A soma das distâncias aos K geocaches já existentes mais próximos deve ser igual ou superior a D; Se existirem menos de K geocaches, deverão ser considerados todos os existentes na soma das distâncias. A Nlogônia é representada por um plano e, atualmente, possui N geocaches ativos. O ministério de Lazer e Esporte escolheu C possíveis localizações para a colocação do geocache comemorativo e pediu para que Clóvis Eduardo os informasse quantas destas localizações são viáveis de acordo as regras nacionais de colocação. Como Clóvis Eduardo é preguiçoso, ele pediu para que você escrevesse um programa para resolver o seu problema.@A entrada contém vários casos de teste. A primeira linha de cada caso contém quatro inteiros separados por espaços N, C (1 ? N, C ? 104), K (1 ? K ? 8) e D (1 ? D ? 105). As próximas N linhas contém dois inteiros separados por um espaço, xi e yi (0 ? xi, yi ? 104), a posição do i-ésimo geocache já existente na Nlogônia. Não há posições repetidas. As próximas C linhas contém dois inteiros separados por um espaço, xj e yj (0 ? xj, yj ? 104), a j-ésima possível posição do novo geocache. A entrada termina com fim-de-arquivo (EOF).@Para cada caso de teste, imprima exatamente uma linha com o número de posições válidas sugeridas pelo Ministério de Lazer e Esporte.@Geometria computacional@Kd-Tree@7
